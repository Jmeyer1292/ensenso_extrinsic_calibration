<?xml version="1.0"?>
<launch>
  <!-- The planning and execution components of MoveIt! configured to run -->
  <!-- using the ROS-Industrial interface. -->
 
  <!-- Non-standard joint names:
       - Create a file [robot_moveit_config]/config/joint_names.yaml
           controller_joint_names: [joint_1, joint_2, ... joint_N] 
       - Update with joint names for your robot (in order expected by rbt controller)
       - and uncomment the following line: -->
  <rosparam command="load" file="$(find abb_irb1200_support)/config/joint_names_irb1200_5_90.yaml" />
  <rosparam param="initial_joint_state">[0.0, 0.0, -0.0, 0.0, -0.0, 0.0]</rosparam>

  <!-- the "sim" argument controls whether we connect to a Simulated or Real robot -->
  <!--  - if sim=false, a robot_ip argument is required -->
  <arg name="sim" default="true" />
  <arg name="robot_ip" unless="$(arg sim)" />
  <arg name="use_bswap" unless="$(arg sim)" default="true" />
  <arg name="debug_mode" default="false"/>

  <!-- load the robot_description parameter before launching ROS-I nodes -->
  <include file="$(find godel_irb1200_moveit_config)/launch/planning_context.launch" >
    <arg name="load_robot_description" value="true" />
  </include>

  <!-- run the robot simulator and action interface nodes -->
  <group if="$(arg sim)">
    <include file="$(find industrial_robot_simulator)/launch/robot_interface_simulator.launch" />
  </group>

  <!-- run the "real robot" interface nodes -->
  <!--   - this typically includes: robot_state, motion_interface, and joint_trajectory_action nodes -->
  <!--   - replace these calls with appropriate robot-specific calls or launch files -->
  <group unless="$(arg sim)">
    <include file="$(find godel_irb1200_moveit_config)/launch/irb1200_robot_ftp_interface.launch">
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="J23_coupled" value="false"/>
      <arg name="ftp_user" value="Default User"/>
      <arg name="ftp_pwd" value="robotics"/>
    </include>
  </group>

  <!-- publish the robot state (tf transforms) -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <include file="$(find godel_irb1200_moveit_config)/launch/move_group.launch">
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <node name="grinding_ensenso_extrinsic_calibration" pkg="grinding_ensenso_extrinsic_calibration" type="grinding_ensenso_extrinsic_calibration" output="screen" required="true" />
  
  <!-- <include file="$(find fanuc_r1000ia_ensenso_n10_grinding_support)/launch/load_r1000ia_grinding.launch" /> -->

  <param name="robot_description" command="$(find xacro)/xacro.py '$(find godel_irb1200_support)/urdf/irb1200_workspace.xacro'" />

  <group if="$(arg debug_mode)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find grinding_ensenso_extrinsic_calibration)/config/robot_state_visualize.rviz" launch-prefix="xterm -e gdb --args" required="true" />
  </group>

  <!-- rviz w/ specified configuration -->
  <group unless="$(arg debug_mode)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find grinding_ensenso_extrinsic_calibration)/config/robot_state_visualize.rviz" required="true" output="screen"/>
  </group>
</launch>
